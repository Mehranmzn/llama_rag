

class RAGApplication:
    def __init__(self, retriever, rag_chain):
        """
        Initialize the RAGApplication with a retriever and a RAG chain.
        
        Args:
            retriever: An instance responsible for retrieving relevant documents.
            rag_chain: A language model chain that processes the retrieved documents to generate an answer.
        """
        self.retriever = retriever
        self.rag_chain = rag_chain

    def run(self, question):
        """
        Run the RAG (Retrieval-Augmented Generation) pipeline for a given question.

        Args:
            question: The input question to be answered.

        Returns:
            answer: The answer generated by the language model.
        """
        # Step 1: Retrieve relevant documents based on the question
        documents = self.retriever.invoke(question)

        # Step 2: Extract and concatenate the content from retrieved documents
        doc_texts = self._extract_document_texts(documents)

        # Step 3: Get the answer from the RAG chain (language model) by passing the question and document texts
        answer = self._generate_answer(question, doc_texts)

        return answer

    def _extract_document_texts(self, documents):
        """
        Extracts and concatenates text content from the list of retrieved documents.

        Args:
            documents: A list of documents retrieved by the retriever.

        Returns:
            str: A string containing concatenated text from the retrieved documents.
        """
        return "\n".join([doc.page_content for doc in documents])

    def _generate_answer(self, question, doc_texts):
        """
        Uses the RAG chain to generate an answer based on the question and retrieved document texts.

        Args:
            question: The input question to be answered.
            doc_texts: The concatenated text of the retrieved documents.

        Returns:
            str: The answer generated by the RAG chain.
        """
        return self.rag_chain.invoke({"question": question, "documents": doc_texts})
